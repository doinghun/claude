name: Auto review PRs

on:
  pull_request:
    types: [opened, synchronize]

concurrency:
  group: claude-review-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  auto-review:
    permissions:
      contents: read
      id-token: write
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    steps:
      - name: Minimize previous Claude comments
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            if (!pr) return;

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            function isClaudeAuthor(entity) {
              const user = entity.user || {};
              const login = (user.login || '').toLowerCase();
              const isBot = user.type === 'Bot';
              const body = (entity.body || '').toLowerCase();
              return login === 'claude[bot]' || login === 'claude' || (isBot && body.includes('claude'));
            }

            // Minimize issue comments from Claude
            const issueComments = await github.paginate(
              github.rest.issues.listComments,
              { owner, repo, issue_number: pr.number, per_page: 100 }
            );

            for (const comment of issueComments.filter(isClaudeAuthor)) {
              try {
                await github.graphql(`
                  mutation MinimizeComment($subjectId: ID!, $classifier: ReportedContentClassifiers!) {
                    minimizeComment(input: { subjectId: $subjectId, classifier: $classifier }) {
                      minimizedComment {
                        isMinimized
                      }
                    }
                  }
                `, {
                  subjectId: comment.node_id,
                  classifier: 'OUTDATED'
                });
                console.log(`Minimized issue comment ${comment.id}`);
              } catch (error) {
                console.warn(`Failed to minimize issue comment ${comment.id}: ${error.message}`);
              }
            }

            // Minimize review from Claude
            const reviews = await github.paginate(
              github.rest.pulls.listReviews,
              { owner, repo, pull_number: pr.number, per_page: 100 }
            );

            for (const review of reviews.filter(isClaudeAuthor)) {
              try {
                await github.graphql(`
                  mutation MinimizeComment($subjectId: ID!, $classifier: ReportedContentClassifiers!) {
                    minimizeComment(input: { subjectId: $subjectId, classifier: $classifier }) {
                      minimizedComment {
                        isMinimized
                      }
                    }
                  }
                `, {
                  subjectId: review.node_id,
                  classifier: 'OUTDATED'
                });
                console.log(`Minimized review comment ${review.id}`);
              } catch (error) {
                console.warn(`Failed to minimize review comment ${review.id}: ${error.message}`);
              }
            }

            // Minimize review comments from Claude
            const reviewComments = await github.paginate(
              github.rest.pulls.listReviewComments,
              { owner, repo, pull_number: pr.number, per_page: 100 }
            );

            for (const comment of reviewComments.filter(isClaudeAuthor)) {
              try {
                await github.graphql(`
                  mutation MinimizeComment($subjectId: ID!, $classifier: ReportedContentClassifiers!) {
                    minimizeComment(input: { subjectId: $subjectId, classifier: $classifier }) {
                      minimizedComment {
                        isMinimized
                      }
                    }
                  }
                `, {
                  subjectId: comment.node_id,
                  classifier: 'OUTDATED'
                });
                console.log(`Minimized review comment ${comment.id}`);
              } catch (error) {
                console.warn(`Failed to minimize review comment ${comment.id}: ${error.message}`);
              }
            }

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Auto review PR
        uses: anthropics/claude-code-action@v1
        with:
          prompt: "/review-pr REPO: ${{ github.repository }} PR_NUMBER: ${{ github.event.pull_request.number }}"
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,mcp__github__create_pending_pull_request_review,mcp__github__add_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__add_pull_request_review_comment_to_pending_review"
            --model "claude-opus-4-1-20250805"
